c antenna functions
c equation numbers refer to hep-ph/0505111
c---------------------------------------------------------
c---------------------------------------------------------
c three-parton tree level
c---------------------------------------------------------
c quark-antiquark antennae
c A30=Aqgq/2
      function A30(ia,iu,ib)
      implicit real*8(a-h,o-z)
c common is filled in phase4      
      common /yij4/y(4,4)
      yau=y(ia,iu)
      yub=y(iu,ib)
      yab=y(ia,ib)
      yaub=yau+yub+yab
      A30=1d0/yaub 
     .     *(yau/yub+yub/yau+2d0*yab*yaub/yau/yub) 
      return
      end
**********************************************************
c A30(ia,iu,ib)=sa30(ia,iu,ib)+sa30(ib,iu,ia) (5.9)
      function sa30(ia,iu,ib)
      implicit real*8(a-h,o-z)
      common /yij4/y(4,4)
      yau=y(ia,iu)
      yub=y(iu,ib)
      yab=y(ia,ib)
      yaub=yau+yub+yab
      sa30=1d0/yaub 
     .     *( yub/yau+2d0*yab*yaub/yau/(yau+yub) ) 
      return
      end
**********************************************************
c quark-gluon antennae
c q-g-g:
c D30(1,3,4)=sd30(1,3,4)+sd30(1,4,3) (6.12)
      function sd30(ia,iu,ib)
      implicit real*8(a-h,o-z)
      common /yij4/y(4,4)
      yau=y(ia,iu)
      yub=y(iu,ib)
      yab=y(ia,ib)
      yaub=yau+yab+yub
      sd30=1d0/yaub**2*( 2d0*yaub**2*yab/yau/yub
     .               + (yab*yub+yub**2)/yau
     .               +  yau*yab/yub+5d0/2d0*yaub+yub/2d0 )
      return
      end
*******************
c sd30test is Bqgg
      function sd30test(ia,iu,ib)
      implicit real*8(a-h,o-z)
      common /yij4/y(4,4)
      yau=y(ia,iu)
      yub=y(iu,ib)
      yab=y(ia,ib)
      yaub=yau+yab+yub
      sd30test=1d0/yaub**2*( 2d0*yaub**2*yab/yau/yub
     .               + (yau*yab)/yub
     .               +  yub*(yab+yub)/yau +yau+yub)
      return
      end
*******************
c g-g-q: corresponds to old Aggq
c NOT NEEDED, use alwaus sd30
************************************************************
      function D30(ia,iu,ib)
      implicit real*8(a-h,o-z)
      common /yij4/y(4,4)
      external sd30
      D30=sd30(ia,iu,ib)+sd30(ia,ib,iu)
      return
      end
      
************************************************************
c x-q-qbar: (6.14)
      function E30(ia,iu,ib)
      implicit real*8(a-h,o-z)
      common /yij4/y(4,4)
      yau=y(ia,iu)
      yub=y(iu,ib)
      yab=y(ia,ib)
      yaub=yau+yab+yub
      E30=1d0/yaub**2*( (yau**2+yab**2)/yub+yau+yab )
      return
      end
************************************************************
c gluon-gluon antennae
c g-g-g:
c F30(1,2,3)=sf30(1,3,2)+sf30(3,2,1)+sf30(2,1,3)  (7.12)
      function sf30(ia,iu,ib)
      implicit real*8(a-h,o-z)
      common /yij4/y(4,4)
      yau=y(ia,iu)
      yub=y(iu,ib)
      yab=y(ia,ib)
      yaub=yau+yab+yub
      sf30=1d0/yaub**2*( 2d0*yaub**2*yab/yau/yub
     .                 + yab*yub/yau
     .                 + yab*yau/yub
     .                 + 8d0/3d0*yaub )
      return
      end
*************************
c g-q-qbar: (7.14)
      function G30(ia,iu,ib)
      implicit real*8(a-h,o-z)
      common /yij4/y(4,4)
      yau=y(ia,iu)
      yub=y(iu,ib)
      yab=y(ia,ib)
      yaub=yau+yab+yub
c G30 as in (7.14)      
      G30=1d0/yaub**2*(yau**2+yab**2)/yub 
      return
      end
c---------------------------------------------------------
c four-parton tree level
c---------------------------------------------------------
c q-g-g-qbar leading colour (5.27)
c taken from ana/A40.sub -> my/A40.frm where A40sub still has 
c to be summed over the two permutations 3<->4 of the gluons 
c whereas sum in (5.27) is already included in A40sub
c but A40 should be symmetric in 3<->4, so permutation of the gluons
c is accounted for by factor 2 in sig4
c statistical factor 1/2 for identical gluons also has to be included
c in sig4, not here
c  A34 =2*A40 
*
      function A34(s12,s13,s14,s23,s24,s34)
      implicit real*8(a-h,o-z)
      s134=s13+s14+s34
      s234=s23+s24+s34

      wt=0d0

      wt = wt + (  - 2*s13**3*s34**2 - 4*s13**3
     +    *s34*s24 - 6*s13**2*s34**2*s24 + 6*s13**2*s34**2 + 8*s13**2*
     +    s34*s24 + 8*s13**2*s24**2 - 2*s13*s34**4 - 12*s13*s34**3*s24
     +     - 4*s13*s34**3 - 6*s13*s34**2*s24**2 - 12*s13*s34**2*s24 - 8
     +    *s13*s34**2 - 4*s13*s34*s24**3 + 8*s13*s34*s24**2 - 16*s13*
     +    s34*s24 - 2*s34**4*s24 + 2*s34**4 - 4*s34**3*s24 + 4*s34**3
     +     - 2*s34**2*s24**3 + 6*s34**2*s24**2 - 8*s34**2*s24 + 4*
     +    s34**2 )/s134/s234

      wt = wt +   ( 2*s13**3*s34 - 4*s13**2*s34 - 8*s13**2*
     +    s24 + 6*s13*s34**3 + 12*s13*s34**2*s24 - 6*s13*s34**2*s234 + 

     +    8*s13*s34**2 + 6*s13*s34*s24**2 - 6*s13*s34*s24*s234 + 4*s13*
     +    s34*s24 + 2*s13*s34*s234**2 - 4*s13*s34*s234 + 4*s13*s34 - 4*
     +    s34**3 - 2*s34**2*s24 + 2*s34**2*s234 - 4*s34**2 )/s134

      wt = wt + ( 4*s13**3*s24 + 8*s13**2*s34*s24 + 6*s13*
     +    s34**2*s24 + 2*s34**3*s24 )/s134**2

      wt = wt +  ( 6*s13**2*s34*s24 + 12*s13*s34**2*s24 - 2*s13*s34**2
     +     - 6*s13*s34*s24*s134 + 4*s13*s34*s24 - 8*s13*s24**2
     +     + 6*s34**3*s24 - 4*s34**3 - 6*s34**2*s24*s134 + 8*s34**2*s24
     +     + 2*s34**2*s134 - 4*s34**2 + 2*s34*s24**3 - 4*s34*s24**2
     +     + 2*s34*s24*s134**2 - 4*s34*s24*s134 + 4*s34*s24 )/s234

      wt = wt +  ( 2*s13*s34**3 + 6*s13*s34**2*s24 + 8*s13*
     +    s34*s24**2 + 4*s13*s24**3 )/s234**2

      wt = wt + 4*s13*s24 + 4*s34**2 + 2*s34*s134**2 - 4*s34*s134 + 2*
     +    s34*s234**2 - 4*s34*s234 + 4*s34

      A34 = wt/s13/s24/s34**2
      return
      end
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc      
      function A40(s12,s13,s14,s23,s24,s34)
      implicit real*8(a-h,o-z)
*
      s134=s13+s14+s34
      s234=s23+s24+s34
      s1234=s134+s234-s34+s12

      wt=0d0
*     
      wt =
     &  + s134**(-2) * ( 2*s12*s13*s14**2*s24 + s12*s13*s24*s34**2 +
     &    s12*s24*s34**3 + 2*s13*s14**2*s23*s24 + 2*s13*s14**2*s24**2
     &     + s13*s23*s24*s34**2 + s13*s24**2*s34**2 + s23*s24*s34**3 +
     &    s24**2*s34**3 )
      wt = wt + s134**(-1)*s234**(-1) * (  - 4*s12*s13*s14*s24*s34 - 4*
     &    s12*s13*s14*s24**2 - 3*s12*s13*s14*s34**2 + 6*s12*s13*s24*
     &    s34**2 + 3*s12*s13*s34**3 + 6*s12*s24*s34**3 + 3*s12*s24**2*
     &    s34**2 + 3*s12*s34**4 - 8*s12**2*s13*s24*s34 - 4*s12**2*s13*
     &    s34**2 - 4*s12**2*s24*s34**2 - 4*s12**2*s34**3 + 2*s12**3*
     &    s34**2 + 3*s13*s14*s24*s34**2 + 4*s13*s14*s24**2*s34 + s13*
     &    s14*s34**3 - 2*s13*s14**2*s24*s34 - s13*s14**2*s34**2 - 3*s13
     &    *s24*s34**3 - 3*s13*s24**2*s34**2 - 2*s13*s24**3*s34 - s13*
     &    s34**4 - 3*s24*s34**4 - 3*s24**2*s34**3 - s24**3*s34**2 -
     &    s34**5 )
      wt = wt + s134**(-1) * ( 2*s12*s13*s14*s34 + 2*s12*s13*s23*s34 -
     &    8*s12*s13*s24*s34 - 4*s12*s13*s34**2 + 3*s12*s23*s34**2 - 6*
     &    s12*s24*s34**2 - 3*s12*s34**3 + 2*s12**2*s13*s34 + 4*s12**2*
     &    s34**2 + 2*s13*s14*s23*s34 - 2*s13*s14*s24*s34 - 4*s13*s14*
     &    s24**2 - s13*s14*s34**2 + 2*s13*s14**2*s24 + s13*s14**2*s34
     &     - 3*s13*s23*s24*s34 - s13*s23*s34**2 + s13*s23**2*s34 + s13*
     &    s24*s34**2 - s13*s24**2*s34 + s13*s34**3 - 3*s23*s24*s34**2
     &     - s23*s34**3 + s23**2*s34**2 + 2*s24*s34**3 - s24**2*s34**2
     &     + s34**4 )
      wt = wt + s234**(-2) * ( 3*s12*s13*s24*s34**2 + 4*s12*s13*s24**2*
     &    s34 + 2*s12*s13*s24**3 + s12*s13*s34**3 + 3*s13*s14*s24*
     &    s34**2 + 4*s13*s14*s24**2*s34 + 2*s13*s14*s24**3 + s13*s14*
     &    s34**3 + 3*s13**2*s24*s34**2 + 4*s13**2*s24**2*s34 + 2*s13**2
     &    *s24**3 + s13**2*s34**3 )
      wt = wt + s234**(-1) * (  - 8*s12*s13*s24*s34 - 3*s12*s13*s34**2
     &     + 2*s12*s14*s24*s34 + 3*s12*s14*s34**2 - 6*s12*s24*s34**2 -
     &    2*s12*s24**2*s34 - 3*s12*s34**3 + 2*s12**2*s24*s34 + 4*s12**2
     &    *s34**2 - 5*s13*s14*s24*s34 - 4*s13*s14*s24**2 - 2*s13*s14*
     &    s34**2 + 2*s13*s24**2*s34 + 2*s13*s24**3 - 3*s13**2*s24*s34
     &     - 2*s13**2*s34**2 - 3*s14*s24*s34**2 - 2*s14*s24**2*s34 -
     &    s14*s34**3 + s14**2*s24*s34 + s14**2*s34**2 + 3*s24*s34**3 +
     &    3*s24**2*s34**2 + s24**3*s34 + s34**4 )
      wt = wt + 4*s12*s13*s34 + 2*s12*s14*s34 + 2*s12*s23*s34 + 6*s12*
     &    s24*s34 + 6*s12*s34**2 + 2*s12**2*s34 + 3*s13*s14*s34 - 2*s13
     &    *s24*s34 + 2*s13**2*s34 + 2*s14*s24*s34 + 3*s14*s34**2 +
     &    s14**2*s34 + 4*s23*s24*s34 + 3*s23*s34**2 + s23**2*s34 - 2*
     &    s24*s34**2 + s24**2*s34

        A40=wt/s34**2/s13/s24
* 	
      return
      end
******************************************************************
c A40tilde is equal to Aslc/2, equal to A40tsub of ana/A40.sub
c sum over small atildes (5.28) already contained in A40tilde
c note that A40tilde is NOT normalized to s1234!!
c for 4 parton this dose not matter as s1234=1
c for 5 parton use always Aqppq(i1,i3,i4,i2) (aversub1new.f)
      function A40tilde(s12,s13,s14,s23,s24,s34)
      implicit real*8(a-h,o-z)

      s134=s13+s14+s34
      s234=s23+s24+s34
      wt=0d0

      wt = wt +   ( s13**3*s24**2 + s13**3*s24
     +    *s12 - s13**2*s14*s24**2 + s13**2*s14*s24*s12 - s13**2*
     +    s23*s24**2 - s13**2*s23*s24*s12 + s13**2*s24**3 + 4*
     +    s13**2*s24**2*s12 + 4*s13**2*s24*s12**2 - s13*s14**2*
     +    s23**2 + s13*s14**2*s23*s12 - s13*s14*s23**2*s12 - 4*s13
     +    *s14*s23*s24*s12 + 4*s13*s14*s23*s12**2 - s13*s14*
     +    s24**2*s12 + 4*s13*s14*s24*s12**2 + s13*s23*s24**2*s12
     +     + 4*s13*s23*s24*s12**2 + 4*s13*s23*s12**3 + s13*s24**3
     +    *s12 + 4*s13*s24**2*s12**2 + 4*s13*s24*s12**3 + s14**3*
     +    s23**2 + s14**3*s23*s12 + s14**2*s23**3 - s14**2*s23**2*
     +    s24 + 4*s14**2*s23**2*s12 - s14**2*s23*s24*s12 + 4*
     +    s14**2*s23*s12**2 + s14*s23**3*s12 + s14*s23**2*s24*
     +    s12 + 4*s14*s23**2*s12**2 + 4*s14*s23*s24*s12**2 + 4*
     +    s14*s23*s12**3 + 4*s14*s24*s12**3 )/s134/s234

      wt = wt +  (  - 2*s13**2*s23*s24 - 2*s13**2*s23*
     +    s12 + s13**2*s24**2 + s13**2*s24*s12 - 2*s13*s14*s23**2
     +     - 2*s13*s14*s23*s24 - 2*s13*s14*s24**2 + 2*s13*s23**2*
     +    s12 + 2*s13*s23*s24*s12 + 4*s13*s23*s12**2 + 2*s13*
     +    s24**3 + 5*s13*s24**2*s12 + 4*s13*s24*s12**2 + s14**2*
     +    s23**2 - 2*s14**2*s23*s24 + s14**2*s23*s12 - 2*s14**2*
     +    s24*s12 + 2*s14*s23**3 + 5*s14*s23**2*s12 + 2*s14*s23*
     +    s24*s12 + 4*s14*s23*s12**2 + 2*s14*s24**2*s12 + 4*s14*
     +    s24*s12**2 )/s134

      wt = wt + s23*s24 * (  - 2*s13**2*s23 - 2*s13**2*
     +    s24 - 2*s13**2*s12 - 2*s14**2*s23 - 2*s14**2*s24 - 2*
     +    s14**2*s12 )/s134**2

      wt = wt +  ( 2*s13**3*s24 - 2*s13**2*s23*s24 + 2*
     +    s13**2*s23*s12 + s13**2*s24**2 + 5*s13**2*s24*s12 - 2*
     +    s13*s14*s23**2 - 2*s13*s14*s23*s24 + 2*s13*s14*s23*s12
     +     - 2*s13*s14*s24**2 + 2*s13*s14*s24*s12 - 2*s13*s23**2*
     +    s12 + 4*s13*s23*s12**2 + s13*s24**2*s12 + 4*s13*s24*
     +    s12**2 + 2*s14**3*s23 + s14**2*s23**2 - 2*s14**2*s23*s24
     +     + 5*s14**2*s23*s12 + 2*s14**2*s24*s12 + s14*s23**2*s12
     +     + 4*s14*s23*s12**2 - 2*s14*s24**2*s12 + 4*s14*s24*
     +    s12**2 )/s234

      wt = wt + s13*s14 * (  - 2*s13*s23**2 - 2*s13*
     +    s24**2 - 2*s14*s23**2 - 2*s14*s24**2 - 2*s23**2*s12 - 2*
     +    s24**2*s12 )/s234**2

      wt = wt + 4*s13**2*s24 + 2*s13**2*s12 + 4*s13*s14*s12 + 4*s13*
     +    s23*s12 + 4*s13*s24**2 + 6*s13*s24*s12 + 2*s13*s24*s34
     +     + 4*s13*s12**2 + 4*s14**2*s23 + 2*s14**2*s12 + 4*s14*
     +    s23**2 + 6*s14*s23*s12 + 2*s14*s23*s34 + 4*s14*s24*s12
     +     + 4*s14*s12**2 + 2*s23**2*s12 + 4*s23*s24*s12 + 4*s23
     +    *s12**2 + 2*s24**2*s12 + 4*s24*s12**2 + 4*s12**3
  

      A40tilde=wt/s13/s14/s23/s24/2d0 

      return
      end
*
************************************************************************
* equal to Bpole/2 in old notation, equal to B40 of ana/B40.sub
* B40below =B40 of (5.37)*s1234
      function B40(s12,s13,s14,s23,s24,s34)
      implicit real*8(a-h,o-z)
*      
      s134=s13+s14+s34
      s234=s23+s24+s34
      wt=0d0
      wt = wt +  ( 2*s12**2*s34 - 2*s12*s13*s24
     +     + s12*s13*s34 - 2*s12*s14*s23 + s12*s14*s34 + 
     +     s12*s23*s34 + 
     +    s12*s24*s34 + 2*s12*s34**2 - s13**2*s24 + 
     +    s13*s14*s23 + s13*
     +    s14*s24 + s13*s23*s24 - s13*s24**2 - 
     +    s14**2*s23 - s14*s23**2
     +     + s14*s23*s24 )/s134/s234

      wt = wt +  ( 2*s12*s13*s14 + s12*s13*s34 + s12*s14*
     +    s34 - s13**2*s24 + s13*s14*s23 + s13*s14*s24 + 
     +   s13*s23*s34 - 
     +    s14**2*s23 + s14*s24*s34 )/s134**2

      wt = wt +  ( 2*s12*s23*s24 + s12*s23*s34 + s12*s24*
     +    s34 + s13*s23*s24 + s13*s23*s34 - s13*s24**2 - 
     +    s14*s23**2 + 
     +    s14*s23*s24 + s14*s24*s34 )/s234**2

      B40= wt/s34**2
    
      return
      end
*
************************************************************************
* equal to -Bfin/2 in old notation, equal to C40 of ana/C40.sub
* (5.42)
c changed 31.8.05: divide by 1/s1234 to have same normalisation as
c in FORM program=> C40 is normalised to 1/s1234, in contrast to 
c A40,B40,A40tilde
c for 4-parton this does not matter since s1234=1
c for 5-parton always use X40i(i1,i2,i3,i4) !!! (see aversub1new.f)
c
      function C40(s12,s13,s14,s23,s24,s34)
      implicit real*8(a-h,o-z)
      s134=s13+s14+s34
      s123=s23+s12+s13
      s124=s12+s14+s24
      s234=s23+s24+s34
      
      s1234=s12+s13+s14+s23+s24+s34
      y12=s12/s1234
      y13=s13/s1234
      y14=s14/s1234
      y23=s23/s1234
      y24=s24/s1234
      y34=s34/s1234
      y134=y13+y14+y34
      y123=y23+y12+y13
      y124=y12+y14+y24
      y234=y23+y24+y34
      
      
      wt=0d0
      wt = wt + y23**(-1)*y34**(-1)*y123**(-1)*y134**(-1) * 
     +  ( 2*y12*y13
     +    *y14 + 2*y12*y13*y34 + 2*y13*y14*y23 + 2*y13*y23*y34 )

      wt = wt + y23**(-1)*y34**(-1)*y123**(-1)*y234**(-1) * 
     + ( y12**2*
     +    y34 - y12*y13*y24 - y12*y14*y23 + y12*y14*y34 + 
     +  y12*y23*y34
     +     + y12*y34**2 + y13*y14*y24 - y13*y23*y24 - y13*y24*y34 - 
     +    y14**2*y23 - y14*y23**2 - y14*y23*y34 )

      wt = wt + y23**(-1)*y34**(-1)*y134**(-1)*y234**(-1) * 
     + (  - y12**2
     +    *y34 + y12*y13*y24 + y12*y14*y23 - y12*y14*y34 - 
     +    y12*y23*y34
     +     - y12*y34**2 - y13*y14*y24 - y13*y23*y24 - y13*y24*y34 + 
     +    y14**2*y23 + y14*y23**2 + y14*y23*y34 )

      wt = wt + y23**(-1)*y34**(-1)*y234**(-2) * 
     + (  - 2*y12*y23*y24 - 2
     +    *y12*y24*y34 + 2*y13*y24**2 - 2*y14*y23*y24 - 
     +    2*y14*y24*y34 )

      C40=-wt/2.d0/s1234**2
c       C40=-wt/2.d0
c division by s1234**2=> C40 has same normalisation as in FORM 
c program (1/sij/s1234) and same as Aqppq       
      return
      end
*************************************************************************
*  from /ana/D40.sub (finite part)
      function D40(s12,s13,s14,s23,s24,s34)
      implicit real*8(a-h,o-z)
      s134=s13+s14+s34
      s123=s23+s12+s13
      s124=s12+s14+s24
      s234=s23+s24+s34
      
      s1234=s12+s13+s14+s23+s24+s34
      y12=s12/s1234
      y13=s13/s1234
      y14=s14/s1234
      y23=s23/s1234
      y24=s24/s1234
      y34=s34/s1234
      y134=y13+y14+y34
      y123=y23+y12+y13
      y124=y12+y14+y24
      y234=y23+y24+y34
      
      wt=0d0
      
       wt =
     &  + s123**(-2) * ( 4*s12*s13**2*s14*s24*s34**3 + 2*s12*s13**2*s14
     &    *s24**2*s34**2 + 2*s12*s13**2*s14*s34**4 + 4*s12*s13**2*
     &    s14**2*s24*s34**2 + 4*s12*s13**2*s14**2*s34**3 + 2*s12*s13**2
     &    *s14**3*s34**2 + 2*s12*s14*s23**2*s24*s34**3 + s12*s14*s23**2
     &    *s24**2*s34**2 + s12*s14*s23**2*s34**4 + 2*s12*s14**2*s23**2*
     &    s24*s34**2 + 2*s12*s14**2*s23**2*s34**3 + s12*s14**3*s23**2*
     &    s34**2 + 2*s14*s23**3*s24*s34**3 + s14*s23**3*s24**2*s34**2
     &     + s14*s23**3*s34**4 + 2*s14**2*s23**3*s24*s34**2 + 2*s14**2*
     &    s23**3*s34**3 + s14**3*s23**3*s34**2 )
      wt = wt + s123**(-1)*s124**(-1) * ( 6*s12*s14*s23*s24*s34**4 + 9*
     &    s12*s14*s23*s24**2*s34**3 + 4*s12*s14*s23*s24**3*s34**2 + s12
     &    *s14*s23*s34**5 - 9*s12*s14*s23**2*s24*s34**3 - 9*s12*s14*
     &    s23**2*s24**2*s34**2 + 6*s12*s14*s23**3*s24*s34**2 - s12*s14*
     &    s23**4*s34**2 + 9*s12*s14**2*s23*s24*s34**3 + 6*s12*s14**2*
     &    s23*s24**2*s34**2 + 3*s12*s14**2*s23*s34**4 - 9*s12*s14**2*
     &    s23**2*s24*s34**2 + 3*s12*s14**2*s23**3*s34**2 + 5*s12*s14**3
     &    *s23*s24*s34**2 + 3*s12*s14**3*s23*s34**3 - 3*s12*s14**3*
     &    s23**2*s34**2 + 2*s12*s14**4*s23*s34**2 + s12*s23*s24*s34**5
     &     + 3*s12*s23*s24**2*s34**4 + 3*s12*s23*s24**3*s34**3 + s12*
     &    s23*s24**4*s34**2 - 3*s12*s23**2*s24*s34**4 - 6*s12*s23**2*
     &    s24**2*s34**3 - 3*s12*s23**2*s24**3*s34**2 + 3*s12*s23**3*s24
     &    *s34**3 + 3*s12*s23**3*s24**2*s34**2 - s12*s23**4*s24*s34**2
     &     )
      wt = wt + s123**(-1)*s134**(-1) * ( 12*s12*s14*s23*s24*s34**4 + 9
     &    *s12*s14*s23*s24**2*s34**3 + 2*s12*s14*s23*s24**3*s34**2 + 5*
     &    s12*s14*s23*s34**5 - 6*s12*s14*s23**2*s24*s34**3 - 8*s12*s14*
     &    s23**2*s34**4 + 3*s12*s14*s23**3*s34**3 + 18*s12*s14**2*s23*
     &    s24*s34**3 + 9*s12*s14**2*s23*s24**2*s34**2 + s12*s14**2*s23*
     &    s24**3*s34 + 10*s12*s14**2*s23*s34**4 - 3*s12*s14**2*s23**2*
     &    s24*s34**2 - 12*s12*s14**2*s23**2*s34**3 + 3*s12*s14**2*
     &    s23**3*s34**2 + 12*s12*s14**3*s23*s24*s34**2 + 3*s12*s14**3*
     &    s23*s24**2*s34 + 11*s12*s14**3*s23*s34**3 - 8*s12*s14**3*
     &    s23**2*s34**2 + s12*s14**3*s23**3*s34 + 3*s12*s14**4*s23*s24*
     &    s34 + 7*s12*s14**4*s23*s34**2 - 2*s12*s14**4*s23**2*s34 + 2*
     &    s12*s14**5*s23*s34 + 3*s12*s23*s24*s34**5 + 3*s12*s23*s24**2*
     &    s34**4 + s12*s23*s24**3*s34**3 + s12*s23*s34**6 - 3*s12*
     &    s23**2*s24*s34**4 - 2*s12*s23**2*s34**5 + s12*s23**3*s34**4
     &     + 3*s14*s23**2*s24**2*s34**3 + 2*s14*s23**2*s24**3*s34**2 + 
     &    3*s14**2*s23**2*s24*s34**3 )
      wt = wt + s123**(-1)*s134**(-1) * ( 6*s14**2*s23**2*s24**2*s34**2
     &     + s14**2*s23**2*s24**3*s34 + 6*s14**3*s23**2*s24*s34**2 + 3*
     &    s14**3*s23**2*s24**2*s34 + s14**3*s23**2*s34**3 + 3*s14**4*
     &    s23**2*s24*s34 + 2*s14**4*s23**2*s34**2 + s14**5*s23**2*s34
     &     + s23**2*s24**3*s34**3 )
      wt = wt + s123**(-1)*s234**(-1) * (  - 5*s12*s13*s14*s23**2*s24*
     &    s34**2 - 2*s12*s13*s14*s23**2*s24**2*s34 - 3*s12*s13*s14*
     &    s23**2*s34**3 - 2*s12*s13*s14**2*s23*s34**3 - 4*s12*s13*
     &    s14**2*s23**2*s24*s34 - 10*s12*s13*s14**2*s23**2*s34**2 - 4*
     &    s12*s13*s14**3*s23*s34**2 - 6*s12*s13*s14**3*s23**2*s34 - 4*
     &    s12*s13*s14**3*s34**3 + s12*s13**2*s14*s23**2*s24*s34 + 3*s12
     &    *s13**2*s14*s23**2*s34**2 - 8*s12*s13**2*s14**2*s23*s34**2 - 
     &    4*s12*s13**2*s14**2*s23**2*s34 - 2*s12*s13**3*s14*s23**2*s34
     &     + s12*s14*s23**2*s24*s34**3 - s12*s14*s23**2*s24**2*s34**2
     &     - s12*s14*s23**2*s24**3*s34 + s12*s14*s23**2*s34**4 - 2*s12*
     &    s14**2*s23*s34**4 + s12*s14**2*s23**2*s24*s34**2 - 4*s12*
     &    s14**2*s23**2*s24**2*s34 + 2*s12*s14**2*s23**2*s34**3 - 6*s12
     &    *s14**3*s23**2*s24*s34 + 6*s12*s14**3*s23**2*s34**2 - 8*s12*
     &    s14**4*s23*s34**2 - 4*s12*s14**4*s23**2*s34 + s14*s23**2*s24*
     &    s34**4 + 3*s14*s23**2*s24**2*s34**3 + 3*s14*s23**2*s24**3*
     &    s34**2 )
      wt = wt + s123**(-1)*s234**(-1) * ( s14*s23**2*s24**4*s34 + 6*
     &    s14**2*s23**2*s24*s34**3 + 9*s14**2*s23**2*s24**2*s34**2 + 5*
     &    s14**2*s23**2*s24**3*s34 + s14**2*s23**2*s34**4 + 9*s14**3*
     &    s23**2*s24*s34**2 + 9*s14**3*s23**2*s24**2*s34 + 3*s14**3*
     &    s23**2*s34**3 + 7*s14**4*s23**2*s24*s34 + 3*s14**4*s23**2*
     &    s34**2 + 2*s14**5*s23**2*s34 )
      wt = wt + s123**(-1) * ( 5*s12*s13*s14*s23*s24*s34**2 - 3*s12*s13
     &    *s14*s23*s34**3 + s12*s13*s14*s23**2*s24*s34 - 3*s12*s13*s14*
     &    s23**2*s34**2 - 4*s12*s13*s14*s24*s34**3 - 4*s12*s13*s14*
     &    s34**4 + 2*s12*s13*s14**2*s23*s24*s34 + 2*s12*s13*s14**2*s23*
     &    s34**2 - 2*s12*s13*s14**2*s23**2*s34 - 8*s12*s13*s14**2*
     &    s34**3 + 4*s12*s13*s14**3*s23*s34 + s12*s13*s23*s24**2*s34**2
     &     - s12*s13*s23*s34**4 - 2*s12*s13*s23**2*s34**3 + s12*s13**2*
     &    s14*s23*s24*s34 - 7*s12*s13**2*s14*s23*s34**2 + 4*s12*s13**2*
     &    s14*s24*s34**2 + 4*s12*s13**2*s14*s34**3 + 2*s12*s13**2*
     &    s14**2*s23*s34 + 4*s12*s13**2*s14**2*s34**2 - 2*s12*s13**2*
     &    s23*s24*s34**2 - 2*s12*s13**2*s23*s34**3 + 2*s12*s13**3*s14*
     &    s23*s34 - 19*s12*s14*s23*s24*s34**3 - 11*s12*s14*s23*s24**2*
     &    s34**2 - 10*s12*s14*s23*s34**4 + 11*s12*s14*s23**2*s24*s34**2
     &     + s12*s14*s23**2*s24**2*s34 + 9*s12*s14*s23**2*s34**3 - 3*
     &    s12*s14*s23**3*s34**2 - 21*s12*s14**2*s23*s24*s34**2 - 18*s12
     &    *s14**2*s23*s34**3 )
      wt = wt + s123**(-1) * ( 2*s12*s14**2*s23**2*s24*s34 + 12*s12*
     &    s14**2*s23**2*s34**2 - s12*s14**2*s23**3*s34 + s12*s14**3*s23
     &    *s24*s34 - 21*s12*s14**3*s23*s34**2 + 3*s12*s14**3*s23**2*s34
     &     - 6*s12*s23*s24*s34**4 - 6*s12*s23*s24**2*s34**3 - 2*s12*s23
     &    *s24**3*s34**2 - 2*s12*s23*s34**5 + 6*s12*s23**2*s24*s34**3
     &     + 2*s12*s23**2*s24**2*s34**2 + 2*s12*s23**2*s34**4 - s12*
     &    s23**3*s24*s34**2 - s12*s23**3*s34**3 - 5*s14*s23**2*s24*
     &    s34**3 - 7*s14*s23**2*s24**2*s34**2 - s14*s23**2*s24**3*s34
     &     - 2*s14*s23**2*s34**4 + 4*s14*s23**3*s24*s34**2 + s14*s23**3
     &    *s24**2*s34 + 3*s14*s23**3*s34**3 - 13*s14**2*s23**2*s24*
     &    s34**2 - 4*s14**2*s23**2*s24**2*s34 - 6*s14**2*s23**2*s34**3
     &     + 2*s14**2*s23**3*s24*s34 + 4*s14**2*s23**3*s34**2 - 5*
     &    s14**3*s23**2*s24*s34 - 7*s14**3*s23**2*s34**2 + s14**3*
     &    s23**3*s34 - 2*s14**4*s23**2*s34 - s23**2*s24**3*s34**2 )
      wt = wt + s124**(-2) * ( 4*s12*s13*s14*s23**2*s34**3 + 4*s12*s13*
     &    s14*s23**3*s34**2 + 2*s12*s13*s23**2*s24*s34**3 + 2*s12*s13*
     &    s23**3*s24*s34**2 + 2*s12*s13**2*s14*s23**2*s34**2 + s12*
     &    s13**2*s23**2*s24*s34**2 + 2*s12*s14*s23**2*s34**4 + 4*s12*
     &    s14*s23**3*s34**3 + 2*s12*s14*s23**4*s34**2 + s12*s23**2*s24*
     &    s34**4 + 2*s12*s23**3*s24*s34**3 + s12*s23**4*s24*s34**2 + 2*
     &    s13*s14*s23**2*s24*s34**3 + 2*s13*s14*s23**3*s24*s34**2 + 
     &    s13**2*s14*s23**2*s24*s34**2 + s14*s23**2*s24*s34**4 + 2*s14*
     &    s23**3*s24*s34**3 + s14*s23**4*s24*s34**2 )
      wt = wt + s124**(-1)*s134**(-1) * ( 3*s12*s14*s23**2*s24*s34**3
     &     - 3*s12*s14*s23**2*s24**2*s34**2 + s12*s14*s23**2*s24**3*s34
     &     - s12*s14*s23**2*s34**4 - 9*s12*s14*s23**3*s24*s34**2 + 3*
     &    s12*s14*s23**3*s24**2*s34 + 3*s12*s14*s23**4*s24*s34 + s12*
     &    s14*s23**5*s34 + 3*s12*s14**2*s23**2*s24*s34**2 - 2*s12*
     &    s14**2*s23**2*s24**2*s34 - 3*s12*s14**2*s23**2*s34**3 - 3*s12
     &    *s14**2*s23**3*s24*s34 - 3*s12*s14**2*s23**4*s34 - s12*s14**3
     &    *s23**2*s24*s34 - 3*s12*s14**3*s23**2*s34**2 + 3*s12*s14**3*
     &    s23**3*s34 - 2*s12*s14**4*s23**2*s34 - s14*s23**2*s24*s34**4
     &     + 3*s14*s23**2*s24**2*s34**3 - 3*s14*s23**2*s24**3*s34**2 + 
     &    s14*s23**2*s24**4*s34 + 3*s14*s23**3*s24*s34**3 - 6*s14*
     &    s23**3*s24**2*s34**2 + 3*s14*s23**3*s24**3*s34 - 3*s14*s23**4
     &    *s24*s34**2 + 3*s14*s23**4*s24**2*s34 + s14*s23**5*s24*s34 )
      wt = wt + s124**(-1)*s234**(-1) * (  - 8*s12*s13*s14*s23*s34**4
     &     + 10*s12*s13*s14*s23**2*s24*s34**2 - 4*s12*s13*s14*s23**2*
     &    s24**2*s34 - 8*s12*s13*s14*s23**2*s34**3 + 4*s12*s13*s14**2*
     &    s23*s34**3 + 4*s12*s13*s14**2*s23**2*s24*s34 + 4*s12*s13*
     &    s14**2*s23**2*s34**2 + 5*s12*s13*s23*s34**5 - 4*s12*s13*
     &    s23**2*s24*s34**3 + 4*s12*s13*s23**2*s24**2*s34**2 - s12*s13*
     &    s23**2*s24**3*s34 + 5*s12*s13*s23**2*s34**4 - 6*s12*s13**2*
     &    s14*s23*s34**3 + 6*s12*s13**2*s14*s23**2*s24*s34 - 2*s12*
     &    s13**2*s14*s23**2*s34**2 + 9*s12*s13**2*s23*s34**4 - 6*s12*
     &    s13**2*s23**2*s24*s34**2 + 3*s12*s13**2*s23**2*s24**2*s34 + 9
     &    *s12*s13**2*s23**2*s34**3 + 7*s12*s13**3*s23*s34**3 - 3*s12*
     &    s13**3*s23**2*s24*s34 + 7*s12*s13**3*s23**2*s34**2 + 2*s12*
     &    s13**4*s23*s34**2 + 2*s12*s13**4*s23**2*s34 - 3*s12*s14*s23*
     &    s34**5 + 3*s12*s14*s23**2*s24*s34**3 - 3*s12*s14*s23**2*
     &    s24**2*s34**2 + 2*s12*s14*s23**2*s24**3*s34 - 3*s12*s14*
     &    s23**2*s34**4 )
      wt = wt + s124**(-1)*s234**(-1) * ( 3*s12*s14**2*s23*s34**4 - 3*
     &    s12*s14**2*s23**2*s24*s34**2 + s12*s14**2*s23**2*s24**2*s34
     &     + 3*s12*s14**2*s23**2*s34**3 - 2*s12*s14**3*s23*s34**3 + 2*
     &    s12*s14**3*s23**2*s24*s34 - 2*s12*s14**3*s23**2*s34**2 + s12*
     &    s23*s34**6 - s12*s23**2*s24*s34**4 + s12*s23**2*s24**2*s34**3
     &     - s12*s23**2*s24**3*s34**2 + s12*s23**2*s34**5 + s13*s14*s23
     &    *s34**5 - 2*s13*s14*s23**2*s24*s34**3 - s13*s14*s23**2*s24**2
     &    *s34**2 - 5*s13*s14*s23**2*s24**3*s34 + s13*s14*s23**2*s34**4
     &     + 3*s13**2*s14*s23*s34**4 + 9*s13**2*s14*s23**2*s24**2*s34
     &     + 3*s13**2*s14*s23**2*s34**3 + 3*s13**3*s14*s23*s34**3 - 7*
     &    s13**3*s14*s23**2*s24*s34 + 3*s13**3*s14*s23**2*s34**2 + 2*
     &    s13**4*s14*s23*s34**2 + 2*s13**4*s14*s23**2*s34 + s14*s23**2*
     &    s24**4*s34 )
      wt = wt + s124**(-1) * ( s12*s13*s14*s23*s24*s34**2 + 9*s12*s13*
     &    s14*s23*s34**3 + 5*s12*s13*s14*s23**2*s24*s34 + 4*s12*s13*s14
     &    *s23**2*s34**2 + s12*s13*s14*s23**3*s34 - 4*s12*s13*s14**2*
     &    s23**2*s34 + 5*s12*s13*s23*s24*s34**3 + s12*s13*s23*s24**2*
     &    s34**2 - s12*s13*s23*s34**4 - 2*s12*s13*s23**2*s24*s34**2 + 
     &    s12*s13*s23**2*s24**2*s34 + 2*s12*s13*s23**2*s34**3 - s12*s13
     &    *s23**3*s24*s34 + s12*s13*s23**4*s34 + 4*s12*s13**2*s14*s23*
     &    s34**2 - 2*s12*s13**2*s14*s23**2*s34 + 2*s12*s13**2*s23*s24*
     &    s34**2 - 2*s12*s13**2*s23*s34**3 - 3*s12*s13**2*s23**2*s24*
     &    s34 + 6*s12*s13**2*s23**2*s34**2 + 3*s12*s13**2*s23**3*s34 - 
     &    s12*s13**3*s23*s34**2 + 4*s12*s13**3*s23**2*s34 + 5*s12*s14*
     &    s23*s24*s34**3 + 3*s12*s14*s23*s24**2*s34**2 + 6*s12*s14*s23*
     &    s34**4 - 4*s12*s14*s23**2*s24*s34**2 + 7*s12*s14*s23**2*
     &    s34**3 + 4*s12*s14*s23**3*s24*s34 + 7*s12*s14*s23**3*s34**2
     &     + 3*s12*s14*s23**4*s34 + 3*s12*s14**2*s23*s24*s34**2 + s12*
     &    s14**2*s23*s34**3 )
      wt = wt + s124**(-1) * (  - 4*s12*s14**2*s23**3*s34 + 2*s12*
     &    s14**3*s23*s34**2 + 4*s12*s23*s24*s34**4 + 3*s12*s23*s24**2*
     &    s34**3 + s12*s23*s24**3*s34**2 - s12*s23**2*s24*s34**3 - s12*
     &    s23**2*s24**2*s34**2 + 3*s12*s23**3*s24*s34**2 - 2*s12*s23**3
     &    *s34**3 - s12*s23**4*s34**2 - s13*s14*s23**2*s24*s34**2 + 6*
     &    s13*s14*s23**2*s24**2*s34 + 2*s13*s14*s23**3*s34**2 + 4*s13*
     &    s14*s23**4*s34 - 7*s13**2*s14*s23**2*s24*s34 + 6*s13**2*s14*
     &    s23**2*s34**2 + 7*s13**2*s14*s23**3*s34 + s13**3*s14*s23*
     &    s34**2 + 6*s13**3*s14*s23**2*s34 + 3*s14*s23**2*s24*s34**3 - 
     &    s14*s23**2*s24**2*s34**2 - s14*s23**2*s34**4 - s14*s23**3*s24
     &    *s34**2 + 4*s14*s23**3*s24**2*s34 - 2*s14*s23**3*s34**3 + 3*
     &    s14*s23**4*s24*s34 + s14*s23**5*s34 )
      wt = wt + s134**(-2) * ( 3*s12*s14*s23**2*s24**2*s34**2 + 6*s12*
     &    s14*s23**3*s24*s34**2 + 3*s12*s14*s23**4*s34**2 + 4*s12*
     &    s14**2*s23**2*s24**2*s34 + 8*s12*s14**2*s23**3*s24*s34 + 4*
     &    s12*s14**2*s23**4*s34 + 2*s12*s14**3*s23**2*s24**2 + 4*s12*
     &    s14**3*s23**3*s24 + 2*s12*s14**3*s23**4 + s12*s23**2*s24**2*
     &    s34**3 + 2*s12*s23**3*s24*s34**3 + s12*s23**4*s34**3 + 6*
     &    s12**2*s14*s23**2*s24*s34**2 + 6*s12**2*s14*s23**3*s34**2 + 8
     &    *s12**2*s14**2*s23**2*s24*s34 + 8*s12**2*s14**2*s23**3*s34 + 
     &    4*s12**2*s14**3*s23**2*s24 + 4*s12**2*s14**3*s23**3 + 2*
     &    s12**2*s23**2*s24*s34**3 + 2*s12**2*s23**3*s34**3 + 3*s12**3*
     &    s14*s23**2*s34**2 + 4*s12**3*s14**2*s23**2*s34 + 2*s12**3*
     &    s14**3*s23**2 + s12**3*s23**2*s34**3 )
      wt = wt + s134**(-1)*s234**(-1) * ( 4*s12*s14*s23*s34**5 + 3*s12*
     &    s14*s23**2*s34**4 + 6*s12*s14**2*s23*s34**4 + 3*s12*s14**2*
     &    s23**2*s34**3 + 5*s12*s14**3*s23*s34**3 + 2*s12*s14**3*s23**2
     &    *s34**2 + 2*s12*s14**4*s23*s34**2 + s12*s23*s34**6 + s12*
     &    s23**2*s34**5 - 12*s12**2*s14*s23*s34**4 - 3*s12**2*s14*
     &    s23**2*s24*s34**2 - 2*s12**2*s14*s23**2*s24**2*s34 - 12*
     &    s12**2*s14*s23**2*s34**3 - 12*s12**2*s14**2*s23*s34**3 - 2*
     &    s12**2*s14**2*s23**2*s24*s34 - 12*s12**2*s14**2*s23**2*s34**2
     &     - 4*s12**2*s14**3*s23*s34**2 - 8*s12**2*s14**3*s23**2*s34 - 
     &    5*s12**2*s23*s34**5 + s12**2*s23**2*s24*s34**3 - s12**2*
     &    s23**2*s24**2*s34**2 - 4*s12**2*s23**2*s34**4 + 12*s12**3*s14
     &    *s23*s34**3 - 4*s12**3*s14*s23**2*s24*s34 + 12*s12**3*s14*
     &    s23**2*s34**2 + 6*s12**3*s14**2*s23*s34**2 - 4*s12**3*s14**2*
     &    s23**2*s24 + 9*s12**3*s23*s34**4 - 3*s12**3*s23**2*s24*s34**2
     &     + 6*s12**3*s23**2*s34**3 - 4*s12**4*s14*s23*s34**2 - 8*
     &    s12**4*s14*s23**2*s34 )
      wt = wt + s134**(-1)*s234**(-1) * (  - 7*s12**4*s23*s34**3 - 4*
     &    s12**4*s23**2*s34**2 + 2*s12**5*s23*s34**2 )
      wt = wt + s134**(-1) * ( 12*s12*s14*s23*s24*s34**3 + 6*s12*s14*
     &    s23*s24**2*s34**2 + s12*s14*s23*s24**3*s34 + 7*s12*s14*s23**2
     &    *s24*s34**2 - 6*s12*s14*s23**2*s24**2*s34 - 5*s12*s14*s23**2*
     &    s34**3 - 8*s12*s14*s23**3*s24*s34 + 14*s12*s14*s23**3*s34**2
     &     - 3*s12*s14*s23**4*s34 + 12*s12*s14**2*s23*s24*s34**2 + 3*
     &    s12*s14**2*s23*s24**2*s34 + 8*s12*s14**2*s23**2*s24*s34 - 4*
     &    s12*s14**2*s23**2*s24**2 - 8*s12*s14**2*s23**2*s34**2 - 4*s12
     &    *s14**2*s23**3*s24 + 11*s12*s14**2*s23**3*s34 + 4*s12*s14**3*
     &    s23*s24*s34 + 4*s12*s14**3*s23**2*s24 - 4*s12*s14**3*s23**2*
     &    s34 + 4*s12*s14**3*s23**3 + 4*s12*s23*s24*s34**4 + 3*s12*s23*
     &    s24**2*s34**3 + s12*s23*s24**3*s34**2 + 3*s12*s23**2*s24*
     &    s34**3 - 2*s12*s23**2*s24**2*s34**2 - s12*s23**2*s34**4 - 4*
     &    s12*s23**3*s24*s34**2 + 3*s12*s23**3*s34**3 - 2*s12*s23**4*
     &    s34**2 + 2*s12**2*s14*s23*s24*s34**2 + 3*s12**2*s14*s23*
     &    s24**2*s34 + 14*s12**2*s14*s23*s34**3 - 15*s12**2*s14*s23**2*
     &    s24*s34 )
      wt = wt + s134**(-1) * ( 14*s12**2*s14*s23**2*s34**2 - 11*s12**2*
     &    s14*s23**3*s34 + s12**2*s14**2*s23*s24*s34 + 13*s12**2*s14**2
     &    *s23*s34**2 - 8*s12**2*s14**2*s23**2*s24 + 9*s12**2*s14**2*
     &    s23**2*s34 + 4*s12**2*s14**3*s23*s34 + 4*s12**2*s14**3*s23**2
     &     + 4*s12**2*s23*s24**2*s34**2 + 6*s12**2*s23*s34**4 - 5*
     &    s12**2*s23**2*s24*s34**2 + 3*s12**2*s23**2*s34**3 - 5*s12**2*
     &    s23**3*s34**2 + 4*s12**3*s14*s23*s24*s34 - 6*s12**3*s14*s23*
     &    s34**2 - 14*s12**3*s14*s23**2*s34 - 2*s12**3*s14**2*s23*s34
     &     + 7*s12**3*s23*s24*s34**2 - 7*s12**3*s23*s34**3 - 3*s12**3*
     &    s23**2*s34**2 + 2*s12**4*s14*s23*s34 + 6*s12**4*s23*s34**2 - 
     &    3*s14*s23**2*s24*s34**3 + 4*s14*s23**2*s24**2*s34**2 - s14*
     &    s23**2*s24**3*s34 + 6*s14*s23**3*s24*s34**2 - 3*s14*s23**3*
     &    s24**2*s34 - s14*s23**3*s34**3 - 3*s14*s23**4*s24*s34 + 2*s14
     &    *s23**4*s34**2 - s14*s23**5*s34 - s14**2*s23**2*s24*s34**2 + 
     &    2*s14**2*s23**2*s24**2*s34 + 3*s14**2*s23**3*s24*s34 - 2*
     &    s14**2*s23**3*s34**2 )
      wt = wt + s134**(-1) * ( 2*s14**2*s23**4*s34 + s14**3*s23**2*s24*
     &    s34 + s14**3*s23**2*s34**2 - s14**3*s23**3*s34 + s14**4*
     &    s23**2*s34 )
      wt = wt + s234**(-2) * ( 8*s12*s13*s14**2*s23*s34**3 + 4*s12*s13*
     &    s14**2*s23**2*s24**2 + 8*s12*s13*s14**2*s23**2*s34**2 + 4*s12
     &    *s13*s14**2*s34**4 + 4*s12*s13**2*s14*s23*s34**3 + 2*s12*
     &    s13**2*s14*s23**2*s24**2 + 4*s12*s13**2*s14*s23**2*s34**2 + 2
     &    *s12*s13**2*s14*s34**4 + 4*s12*s14**3*s23*s34**3 + 2*s12*
     &    s14**3*s23**2*s24**2 + 4*s12*s14**3*s23**2*s34**2 + 2*s12*
     &    s14**3*s34**4 + 8*s12**2*s13*s14*s23*s34**3 + 4*s12**2*s13*
     &    s14*s23**2*s24**2 + 8*s12**2*s13*s14*s23**2*s34**2 + 4*s12**2
     &    *s13*s14*s34**4 + 8*s12**2*s14**2*s23*s34**3 + 4*s12**2*
     &    s14**2*s23**2*s24**2 + 8*s12**2*s14**2*s23**2*s34**2 + 4*
     &    s12**2*s14**2*s34**4 + 4*s12**3*s14*s23*s34**3 + 2*s12**3*s14
     &    *s23**2*s24**2 + 4*s12**3*s14*s23**2*s34**2 + 2*s12**3*s14*
     &    s34**4 )
      wt = wt + s234**(-1) * ( 5*s12*s13*s14*s23*s34**3 + 4*s12*s13*s14
     &    *s23**2*s24**2 + 4*s12*s13*s14*s23**2*s34**2 + 4*s12*s13*s14*
     &    s34**4 - 10*s12*s13*s14**2*s23*s34**2 - 4*s12*s13*s14**2*
     &    s23**2*s24 - 4*s12*s13*s14**2*s23**2*s34 - 8*s12*s13*s14**2*
     &    s34**3 + 6*s12*s13*s23*s34**4 - 4*s12*s13*s23**2*s24*s34**2
     &     + s12*s13*s23**2*s24**2*s34 + 5*s12*s13*s23**2*s34**3 - 8*
     &    s12*s13**2*s14*s23*s34**2 - 2*s12*s13**2*s14*s23**2*s34 - 4*
     &    s12*s13**2*s14*s34**3 + 7*s12*s13**2*s23*s34**3 - 3*s12*
     &    s13**2*s23**2*s24*s34 + 5*s12*s13**2*s23**2*s34**2 + 6*s12*
     &    s13**3*s23*s34**2 + 4*s12*s13**3*s23**2*s34 - 5*s12*s14*s23*
     &    s34**4 + 3*s12*s14*s23**2*s24*s34**2 - s12*s14*s23**2*s24**2*
     &    s34 - 3*s12*s14*s23**2*s34**3 + 8*s12*s14**2*s23*s34**3 - 3*
     &    s12*s14**2*s23**2*s24*s34 + 4*s12*s14**2*s23**2*s24**2 + 15*
     &    s12*s14**2*s23**2*s34**2 + 4*s12*s14**2*s34**4 - 16*s12*
     &    s14**3*s23*s34**2 - 4*s12*s14**3*s23**2*s24 - 6*s12*s14**3*
     &    s23**2*s34 )
      wt = wt + s234**(-1) * (  - s12*s23**2*s24*s34**3 + s12*s23**2*
     &    s24**2*s34**2 - 12*s12**2*s13*s14*s23*s34**2 - 12*s12**2*s13*
     &    s14*s23**2*s34 - 4*s12**2*s13*s14*s34**3 - s12**2*s13*s23**2*
     &    s24*s34 + s12**2*s13*s23**2*s34**2 + 10*s12**2*s13**2*s23*
     &    s34**2 + 6*s12**2*s13**2*s23**2*s34 + 17*s12**2*s14*s23*
     &    s34**3 + s12**2*s14*s23**2*s24*s34 + 4*s12**2*s14*s23**2*
     &    s24**2 + 19*s12**2*s14*s23**2*s34**2 + 4*s12**2*s14*s34**4 - 
     &    10*s12**2*s14**2*s23*s34**2 - 8*s12**2*s14**2*s23**2*s24 - 6*
     &    s12**2*s14**2*s23**2*s34 + 6*s12**2*s23*s34**4 - 2*s12**2*
     &    s23**2*s24*s34**2 + s12**2*s23**2*s24**2*s34 + 5*s12**2*
     &    s23**2*s34**3 + 10*s12**3*s13*s23*s34**2 + 4*s12**3*s13*
     &    s23**2*s34 - 12*s12**3*s14*s23*s34**2 - 14*s12**3*s14*s23**2*
     &    s34 - 7*s12**3*s23*s34**3 + 2*s12**3*s23**2*s24*s34 - 4*
     &    s12**3*s23**2*s34**2 + 6*s12**4*s23*s34**2 + 2*s12**4*s23**2*
     &    s34 + s13*s14*s23*s34**4 + 2*s13*s14*s23**2*s24*s34**2 + 6*
     &    s13*s14*s23**2*s24**2*s34 )
      wt = wt + s234**(-1) * ( 2*s13*s14*s23**2*s34**3 + s13*s14**2*s23
     &    *s34**3 + 2*s13*s14**2*s23**2*s34**2 + 4*s13*s14**3*s23*
     &    s34**2 + 10*s13*s14**3*s23**2*s34 + 3*s13**2*s14*s23*s34**3
     &     - 7*s13**2*s14*s23**2*s24*s34 + s13**2*s14*s23**2*s34**2 + 6
     &    *s13**2*s14**2*s23*s34**2 + 10*s13**2*s14**2*s23**2*s34 + 4*
     &    s13**3*s14*s23*s34**2 + 6*s13**3*s14*s23**2*s34 + s14*s23**2*
     &    s24*s34**3 + 2*s14*s23**2*s24**2*s34**2 + s14**2*s23*s34**4
     &     + 4*s14**2*s23**2*s24*s34**2 + 6*s14**2*s23**2*s24**2*s34 + 
     &    2*s14**2*s23**2*s34**3 - 2*s14**3*s23*s34**3 + 7*s14**3*
     &    s23**2*s24*s34 + s14**3*s23**2*s34**2 + 2*s14**4*s23*s34**2
     &     + 6*s14**4*s23**2*s34 )
      wt = wt + 22*s12*s13*s14*s23*s24*s34 + 14*s12*s13*s14*s23*s34**2
     &     + 12*s12*s13*s14*s23**2*s34 - 8*s12*s13*s14*s34**3 + 14*s12*
     &    s13*s14**2*s23*s34 + 14*s12*s13*s23*s24*s34**2 + 6*s12*s13*
     &    s23*s24**2*s34 + 4*s12*s13*s23*s34**3 + 15*s12*s13*s23**2*s24
     &    *s34 + 15*s12*s13*s23**2*s34**2 + 12*s12*s13*s23**3*s34 + 14*
     &    s12*s13**2*s14*s23*s34 + 2*s12*s13**2*s14*s34**2 + 9*s12*
     &    s13**2*s23*s24*s34 + 11*s12*s13**2*s23*s34**2 + 18*s12*s13**2
     &    *s23**2*s34 + 4*s12*s13**3*s23*s34 + s12*s14*s23*s24*s34**2
     &     + 9*s12*s14*s23*s24**2*s34 + 5*s12*s14*s23*s34**3 + 6*s12*
     &    s14*s23**2*s24*s34 + 2*s12*s14*s23**2*s24**2 + 16*s12*s14*
     &    s23**2*s34**2 - 3*s12*s14*s23**3*s34 + 2*s12*s14*s34**4 + 14*
     &    s12*s14**2*s23*s24*s34 - 8*s12*s14**2*s23*s34**2 - 8*s12*
     &    s14**2*s23**2*s24 + 11*s12*s14**2*s23**2*s34 + 8*s12*s14**3*
     &    s23*s34 + 2*s12*s14**3*s23**2 - s12*s23*s24*s34**3 + s12*s23*
     &    s24**2*s34**2 + s12*s23*s24**3*s34 + 2*s12*s23**2*s24*s34**2
     &     + 5*s12*s23**2*s24**2*s34
      wt = wt + 2*s12*s23**2*s34**3 + 5*s12*s23**3*s24*s34 - 2*s12*
     &    s23**3*s34**2 + 2*s12*s23**4*s34 + 18*s12**2*s13*s14*s23*s34
     &     + 9*s12**2*s13*s23*s24*s34 + 17*s12**2*s13*s23*s34**2 + 18*
     &    s12**2*s13*s23**2*s34 + 6*s12**2*s13**2*s23*s34 + 17*s12**2*
     &    s14*s23*s24*s34 - 9*s12**2*s14*s23*s34**2 - 8*s12**2*s14*
     &    s23**2*s34 + 8*s12**2*s14**2*s23*s34 + 8*s12**2*s23*s24*
     &    s34**2 + 3*s12**2*s23*s24**2*s34 - 3*s12**2*s23*s34**3 + 11*
     &    s12**2*s23**2*s24*s34 + 3*s12**2*s23**2*s34**2 + 6*s12**2*
     &    s23**3*s34 + 4*s12**3*s13*s23*s34 + 10*s12**3*s14*s23*s34 + 4
     &    *s12**3*s23*s24*s34 + 12*s12**3*s23*s34**2 + 8*s12**3*s23**2*
     &    s34 + 2*s12**4*s23*s34 + 16*s13*s14*s23*s24*s34**2 + 6*s13*
     &    s14*s23*s24**2*s34 + 11*s13*s14*s23*s34**3 + 6*s13*s14*s23**2
     &    *s24*s34 + 14*s13*s14*s23**2*s34**2 + 8*s13*s14*s23**3*s34 + 
     &    9*s13*s14**2*s23*s24*s34 + 17*s13*s14**2*s23*s34**2 + 17*s13*
     &    s14**2*s23**2*s34 + 4*s13*s14**3*s23*s34 + 3*s13*s23*s24*
     &    s34**3
      wt = wt + 3*s13*s23*s24**2*s34**2 + s13*s23*s24**3*s34 + s13*s23*
     &    s34**4 + 6*s13*s23**2*s24*s34**2 + 3*s13*s23**2*s24**2*s34 + 
     &    3*s13*s23**2*s34**3 + 3*s13*s23**3*s24*s34 + 3*s13*s23**3*
     &    s34**2 + s13*s23**4*s34 + 9*s13**2*s14*s23*s24*s34 + 15*
     &    s13**2*s14*s23*s34**2 + 18*s13**2*s14*s23**2*s34 + 6*s13**2*
     &    s14**2*s23*s34 + 6*s13**2*s23*s24*s34**2 + 3*s13**2*s23*
     &    s24**2*s34 + 3*s13**2*s23*s34**3 + 6*s13**2*s23**2*s24*s34 + 
     &    6*s13**2*s23**2*s34**2 + 3*s13**2*s23**3*s34 + 4*s13**3*s14*
     &    s23*s34 + 3*s13**3*s23*s24*s34 + 4*s13**3*s23*s34**2 + 4*
     &    s13**3*s23**2*s34 + 2*s13**4*s23*s34 + 5*s14*s23*s24*s34**3
     &     + 5*s14*s23*s24**2*s34**2 + s14*s23*s24**3*s34 + 2*s14*s23*
     &    s34**4 + 3*s14*s23**2*s24*s34**2 + 2*s14*s23**2*s24**2*s34 - 
     &    2*s14*s23**2*s34**3 - s14*s23**3*s24*s34 + 2*s14*s23**3*
     &    s34**2 - s14*s23**4*s34 + 12*s14**2*s23*s24*s34**2 + 3*s14**2
     &    *s23*s24**2*s34 + 5*s14**2*s23*s34**3 + 4*s14**2*s23**2*s24*
     &    s34
      wt = wt + 2*s14**2*s23**2*s34**2 + 5*s14**2*s23**3*s34 + 4*s14**3
     &    *s23*s24*s34 + 10*s14**3*s23*s34**2 + 5*s14**3*s23**2*s34 + 2
     &    *s14**4*s23*s34

           D40=wt/s34**2/s14/s23**2/s12

      return
      end
*
c---------------------------------------------------------
c three-parton one loop
c---------------------------------------------------------
c quark-antiquark antennae
c subleading colour: (5.15) tildeA31=1/2*(FCF+8*T)/s123
c
      function tilda31(s12,s13,s23)
      implicit real*8(a-h,o-z)
      parameter(pi=3.141592653589793238d0)

      s123=s12+s13+s23
      y12=s12/s123
      y13=s13/s123
      y23=s23/s123

      omy12=1d0-y12
      omy13=1d0-y13
      omy23=1d0-y23

      r1213=log(y12)*log(y13)-log(y12)*log(omy12)-log(y13)*log(omy13)
     .    +pi**2/6d0-rli2(y12)-rli2(y13)
      r1223=log(y12)*log(y23)-log(y12)*log(omy12)-log(y23)*log(omy23)
     .    +pi**2/6d0-rli2(y12)-rli2(y23)
      tilda31 =
     .  +(y12/(y12+y13)+y12/(y12+y23)+(y12+y23)/y13+(y12+y13)/y23)
     .  +log(y13)*((4d0*y12**2+2d0*y12*y13
     .           +4d0*y12*y23+y13*y23)/(y12+y23)**2)
     .  +log(y23)*((4d0*y12**2+2d0*y12*y23
     .           +4d0*y12*y13+y13*y23)/(y12+y13)**2)
     . -2d0*((y12**2+(y12+y13)**2)/y13/y23*r1223
     .                  +(y12**2+(y12+y23)**2)/y13/y23*r1213
     .                  +(y13**2+y23**2)/y13/y23/(y13+y23)
     .    -2d0*log(y12)*(y12**2/(y13+y23)**2+2d0*y12/(y13+y23)) )
     
*
*  correction such that finite piece remains after I1 extracted
*
      tilda31=(tilda31-3d0*log(y12)*T(y12,y13,y23))/2d0/s123
c     1/s123 to have normalisation of (3.3)
      return
      end
*
**************************************************************
c leading colour: (5.13) A31=(FCA+FCF/2)/s123
c FCF,FCA are defined at the end of this file
      function A31(s12,s13,s23)
      implicit real*8(a-h,o-z)
      parameter(pi=3.141592653589793238d0)

      s123=s12+s13+s23
      A31=FCA(s12,s13,s23)+FCF(s12,s13,s23)/2d0
      A31=A31/s123
      return
      end
**************************************************************
c quark loop contribution: (5.17) 
      function A31hat(s12,s13,s23)
      implicit real*8(a-h,o-z)
      parameter(pi=3.141592653589793238d0)

      s123=s12+s13+s23
      y13=s13/s123
      y23=s23/s123

      A31hat=1d0/6d0*(dlog(y13)+dlog(y23))*T(s12,s13,s23)/s123
      return
      end


c---------------------------------------------------------
c four parton tree level subtraction terms 
c---------------------------------------------------------
c has been Alcs in old notation
c sum over 1-3-4 and 3-4-2 antenna
*
      function A40s(i1,i2,i3,i4,wtplot)
      implicit double precision(a-h,o-z)
      common /s3/s12,s13,s23
      common /yij4/y(4,4)
      common /plots/plot
      logical plot 

      wt=0d0
*
* 1-3-4 antenna
*
      call pmap4to3(i1,i3,i4,i2,1,3,2)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = sd30(i1,i3,i4)*T(s12,s13,s23)*var

           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 3-4-2 antenna
*
      call pmap4to3(i3,i4,i2,i1,3,2,1)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = sd30(i2,i4,i3)*T(s12,s13,s23)*var
           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif

      A40s = wt
      return
      end
************************************************************************
* has been Aslcs in old notation
      function A40tildes(i1,i2,i3,i4,wtplot)
      implicit real*8(a-h,o-z)
      common /s3/s12,s13,s23
      common /yij4/y(4,4)
      common /plots/plot
      logical plot 

      wt=0d0
*
* 1-3-2 antenna
*
      call pmap4to3(i1,i3,i2,i4,1,2,3)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = A30(i1,i3,i2)*T(s12,s13,s23)*var
           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 1-4-2 antenna
*
      call pmap4to3(i1,i4,i2,i3,1,2,3)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = A30(i1,i4,i2)*T(s12,s13,s23)*var
           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif

      A40tildes = wt

      return
      end
*
************************************************************************
* has been Bpoles in old notation
c      function B40s(y12,y13,y14,y23,y24,y34,wtplot)
      function B40s(i1,i2,i3,i4,wtplot)
      implicit real*8(a-h,o-z)
      common /yij4/y(4,4)
      common /s3/s12,s13,s23
      common /plots/plot
      logical plot 

      wt=0d0
*
*     3 and 4 collinear ie quark antiquark -> gluon
*
* 1-3-4 antenna
*
      call pmap4to3(i1,i3,i4,i2,1,3,2)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = E30(i1,i3,i4)*T(s12,s13,s23)*var/2d0
           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 3-4-2 antenna
*
      call pmap4to3(i3,i4,i2,i1,3,2,1)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = E30(i2,i3,i4)*T(s12,s13,s23)*var/2d0
           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif

      B40s = wt

      return
      end

c -----------------------------------------------------------
c momentum maps
c -----------------------------------------------------------
      subroutine pmap4to3(i1,i2,i3,i4,j1,j2,j3)
      implicit real*8(a-h,o-z)
      common /yij4/y(4,4)
      common /s3/s12,s13,s23
      common /pmom/p(4,5) 
      common /pcut/ppar(4,5) 
      common/mapmomenta/p5(1:4,1:5),p4(1:4,1:4),p3(1:4,1:3)
      dimension s(3,3)
      y12=y(i1,i2)
      y13=y(i1,i3)
      y23=y(i2,i3)

      do i=1,4
         p4(i,1) = p(i,i1)
         p4(i,2) = p(i,i2)
         p4(i,3) = p(i,i3)
         p4(i,4) = p(i,i4)
      enddo

      call DAK(y12,y23,y13,a,b,c)

      s(j1,j2)=        y(i1,i2)        +y(i1,i3)        +y(i2,i3)
      s(j1,j3)=      a*y(i1,i4)      +b*y(i2,i4)      +c*y(i3,i4)
      s(j2,j3)=(1d0-a)*y(i1,i4)+(1d0-b)*y(i2,i4)+(1d0-c)*y(i3,i4)

      s(j2,j1)=s(j1,j2)
      s(j3,j1)=s(j1,j3)
      s(j3,j2)=s(j2,j3)

      do i=1,4
        ppar(i,j1)=      a*p(i,i1)      +b*p(i,i2)      +c*p(i,i3)
        ppar(i,j2)=(1d0-a)*p(i,i1)+(1d0-b)*p(i,i2)+(1d0-c)*p(i,i3)
        ppar(i,j3)=p(i,i4)
        p3(i,1) = ppar(i,j1)
        p3(i,2) = ppar(i,j2)
        p3(i,3) = ppar(i,j3)
      enddo

      s12=s(1,2)
      s13=s(1,3)
      s23=s(2,3)

      return
      end
*
************************************************************************
*
      subroutine pmap5to4(i1,i2,i3,i4,i5,j1,j2,j3,j4)
      implicit real*8(a-h,o-z)
      common /yij5/y(5,5)
      common /s4/s12,s13,s14,s23,s24,s34
      common /pmom/p(4,5) 
      common /pcut/ppar(4,5) 
      dimension s(4,4)
      y12=y(i1,i2)
      y13=y(i1,i3)
      y23=y(i2,i3)

      call DAK(y12,y23,y13,a,b,c)

      s(j1,j2)=        y(i1,i2)        +y(i1,i3)        +y(i2,i3)
      s(j1,j3)=      a*y(i1,i4)      +b*y(i2,i4)      +c*y(i3,i4)
      s(j1,j4)=      a*y(i1,i5)      +b*y(i2,i5)      +c*y(i3,i5)
      s(j2,j3)=(1d0-a)*y(i1,i4)+(1d0-b)*y(i2,i4)+(1d0-c)*y(i3,i4)
      s(j2,j4)=(1d0-a)*y(i1,i5)+(1d0-b)*y(i2,i5)+(1d0-c)*y(i3,i5)
      s(j3,j4)=y(i4,i5)

      s(j2,j1)=s(j1,j2)
      s(j3,j1)=s(j1,j3)
      s(j4,j1)=s(j1,j4)
      s(j3,j2)=s(j2,j3)
      s(j4,j2)=s(j2,j4)
      s(j4,j3)=s(j3,j4)

      do i=1,4
        ppar(i,j1)=      a*p(i,i1)      +b*p(i,i2)      +c*p(i,i3)
        ppar(i,j2)=(1d0-a)*p(i,i1)+(1d0-b)*p(i,i2)+(1d0-c)*p(i,i3)
        ppar(i,j3)=p(i,i4)
        ppar(i,j4)=p(i,i5)
      enddo

      s12=s(1,2)
      s13=s(1,3)
      s14=s(1,4)
      s23=s(2,3)
      s24=s(2,4)
      s34=s(3,4)
      return
      end
*
************************************************************************
*
      subroutine DAK(yau,yub,yab,x,y,z)
      implicit real*8(a-h,o-z)
      y=yub/(yau+yub)
      yaub=yau+yub+yab
      rho=yaub*yab+4d0*y*(1d0-y)*yau*yub 
      rho=sqrt(rho/yaub/yab)
      x=(1d0+rho+yub*(1d0+rho-2d0*y)/(yau+yab))/2d0
      z=(1d0-rho+yau*(1d0-rho-2d0*y)/(yub+yab))/2d0
      return
      end
*
c---------------------------------------------------------
c five parton single unresolved subtraction terms 
c---------------------------------------------------------
*
      function A345s(i1,i2,i3,i4,i5,wtplot)
      implicit real*8(a-h,o-z)
      common /yij5/y(5,5)
      common /s4/s12,s13,s14,s23,s24,s34
      common /plots/plot
      logical plot 
      wt=0d0
      
* non-cyclic permus are included explicitly in tt0 of sig4s
* global factor 4: 2 because 2*A40=A34, 2 because the antenna functions 
* are half of Nigel's antenna functions => factor 4    
* 10.7.06: do NOT add cyclic permutations of (3,4,5) explicitly
* as 5-parton ME also does not contain them 
* 

* there is another factor 1/2, since the subtraction term is 
* the average of the two permutations. In sig4s, one is not allowed 
* to have symmetry factors since all subtraction terms write directly into
* the histograms
  
      fac=2d0
* 1-3-4 antenna
*
      call pmap5to4(i1,i3,i4,i5,i2,1,3,4,2)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = sd30y5(i1,i3,i4)*
     #	   A40(s12,s13,s14,s23,s24,s34)*var*fac
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 3-4-5 antenna
*
      call pmap5to4(i3,i4,i5,i1,i2,3,4,1,2)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = sf30y5(i3,i4,i5)*
     #	   A40(s12,s13,s14,s23,s24,s34)*var*fac
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 4-5-2 antenna
*
      call pmap5to4(i2,i5,i4,i1,i3,2,4,1,3)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = sd30y5(i2,i5,i4)*
     #	   A40(s12,s13,s14,s23,s24,s34)*var*fac
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
	      
      A345s = wt

      return
      end
*
************************************************************************
*
      function A345ps(i1,i2,i3,i4,i5,wtplot)
      implicit real*8(a-h,o-z)
      common /yij5/y(5,5)
      common /s4/s12,s13,s14,s23,s24,s34
      common /plots/plot
      logical plot 
      wt=0d0
*
* factor 2 from A34=2*A40, factor 2 from Aqgg sim 2*d30,
* factor 1/2 from explicit inclusion of 3<->4 =>overall factor 2
* 1-3-4 antenna
*
      call pmap5to4(i1,i3,i4,i5,i2,1,3,4,2)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = sd30y5(i1,i3,i4)*2d0*
     #	   A40tilde(s12,s13,s14,s23,s24,s34)*var
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 2-4-3 antenna
*
      call pmap5to4(i2,i4,i3,i1,i5,2,4,1,3)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = sd30y5(i2,i4,i3)*2d0*
     #	   A40tilde(s12,s13,s14,s23,s24,s34)*var
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 1-4-3 antenna
*
      call pmap5to4(i1,i4,i3,i5,i2,1,3,4,2)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = sd30y5(i1,i4,i3)*2d0*
     #	   A40tilde(s12,s13,s14,s23,s24,s34)*var
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 2-3-4 antenna
*
      call pmap5to4(i2,i3,i4,i1,i5,2,4,1,3)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = sd30y5(i2,i3,i4)*2d0*
     #	   A40tilde(s12,s13,s14,s23,s24,s34)*var
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 1-5-2 antenna
*
* A34=2*A40, Aqgq=2*A30 => multiply with  factor 4*1/2 
* 1/2 from explicit symmetrisation 3<->4 in pmap
      call pmap5to4(i1,i5,i2,i3,i4,1,2,3,4)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
          wtsub = A30y5(i1,i5,i2)*2d0*
     #	  A40(s12,s13,s14,s23,s24,s34)*var
           if(plot)then 
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
	
      call pmap5to4(i1,i5,i2,i4,i3,1,2,3,4)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
          wtsub = A30y5(i1,i5,i2)*2d0*
     #	  A40(s12,s13,s14,s23,s24,s34)*var
           if(plot)then 
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif

      A345ps = wt

      return
      end
*
************************************************************************
* Aslc=2*A40tilde, Aqgq=2*A30 => multiply with overall factor 4
      function A345qs(i1,i2,i3,i4,i5,wtplot)
      implicit real*8(a-h,o-z)
      common /yij5/y(5,5)
      common /s4/s12,s13,s14,s23,s24,s34
      common /plots/plot
      logical plot 
      wt=0d0
      
*
* 1-3-2 antenna
*
      call pmap5to4(i1,i3,i2,i4,i5,1,2,3,4)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
         wtsub = A30y5(i1,i3,i2)*
     #	 4d0*A40tilde(s12,s13,s14,s23,s24,s34)*var
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif

*
* 1-4-2 antenna
*
      call pmap5to4(i1,i4,i2,i3,i5,1,2,3,4)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = A30y5(i1,i4,i2)*
     #	  4d0*A40tilde(s12,s13,s14,s23,s24,s34)*var
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif

*
* 1-5-2 antenna
*
      call pmap5to4(i1,i5,i2,i3,i4,1,2,3,4)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = A30y5(i1,i5,i2)*
     #    4d0*A40tilde(s12,s13,s14,s23,s24,s34)*var
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif

      A345qs = wt

      return
      end
*
************************************************************************
*
      function A15432s(i1,i2,i3,i4,i5,wtplot)
      implicit real*8(a-h,o-z)
      common /yij5/y(5,5)
      common /s4/s12,s13,s14,s23,s24,s34
      common /plots/plot
      logical plot 
      wt=0d0
*
c factors of two below because Bpole=2*B40, A34=2*A40,
c Aqgq=2*A30, E30(i1,i3,i4) is symmetric in i3,i4, same for G30
c but Aqqx,Axqq are NOT symmetric
c G30(1,3,4)=(Axqq(1,3,4)+Aqqx(3,4,1))/2
*
* 1-5-4 antenna, (a) in (8.2) of 3jet.tex
*
      call pmap5to4(i1,i5,i4,i2,i3,1,4,2,3)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = A30y5(i1,i5,i4)*4d0*
     #	   B40(s12,s13,s14,s23,s24,s34)*var
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 5-4-3 antenna (c) in (8.2)
* (4 unresolved, G30 is symmetric in last 2 arguments)
*
      call pmap5to4(i5,i4,i3,i1,i2,3,4,1,2)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = G30y5(i5,i4,i3)*4d0*
     #	   A40(s12,s13,s14,s23,s24,s34)*var 
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
      A15432s = wt

      return
      end
*
************************************************************************
*
      function A14352s(i1,i2,i3,i4,i5,wtplot)
      implicit real*8(a-h,o-z)
      common /yij5/y(5,5)
      common /s4/s12,s13,s14,s23,s24,s34
      common /plots/plot
      logical plot 
      wt=0d0
*
* 3-5-2 antenna (b) in (8.2)
*
      call pmap5to4(i3,i5,i2,i1,i4,3,2,1,4)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = A30y5(i3,i5,i2)*4d0*
     #	   B40(s12,s13,s14,s23,s24,s34)*var
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 5-4-3 antenna (d) in (8.2)
*
      call pmap5to4(i5,i4,i3,i1,i2,4,3,1,2)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = G30y5(i5,i3,i4)*4d0*
     #	   A40(s12,s13,s14,s23,s24,s34)*var
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
              call distrib(wtdis)
              wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
		
      A14352s = wt

      return
      end

************************************************************************
* B50cs+B50es has been B15234s
c note that whole expression (9.2)=-1/4*[B50cs+B50ds+B50es+B50cds+B50dds+B50eds]
      function B50cs(i1,i2,i3,i4,i5,wtplot)
      implicit real*8(a-h,o-z)
      common /yij5/y(5,5)
      common /s4/s12,s13,s14,s23,s24,s34
      common /plots/plot
      logical plot 
      wt=0d0
*
* 1-5-2 antenna
*
      call pmap5to4(i1,i5,i2,i3,i4,1,2,3,4)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = A30y5(i1,i5,i2)*2d0*
     #	   B40(s12,s13,s14,s23,s24,s34)*var
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
c exchange 3<->4 
      call pmap5to4(i1,i5,i2,i4,i3,1,2,3,4)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = A30y5(i1,i5,i2)*2d0*
     #	   B40(s12,s13,s14,s23,s24,s34)*var
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
	
	B50cs=wt

        return
        end
*	
************************************************************************
* has been B12354s
c     2*B40=Bpole,Aqgq=2*A30 => factor 4 times 1/2 from 3<->4 in (9.2) 
      function B50ds(i1,i2,i3,i4,i5,wtplot)
      implicit real*8(a-h,o-z)
      common /yij5/y(5,5)
      common /s4/s12,s13,s14,s23,s24,s34
      common /plots/plot
      logical plot 
      wt=0d0
*
* 3-5-4 antenna
*
      call pmap5to4(i3,i5,i4,i1,i2,3,4,1,2)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = A30y5(i3,i5,i4)*2d0*
     #	   B40(s12,s13,s14,s23,s24,s34)*var
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
c 
* 4-5-3 antenna
*
      call pmap5to4(i4,i5,i3,i1,i2,3,4,1,2)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = A30y5(i4,i5,i3)*2d0*
     #	   B40(s12,s13,s14,s23,s24,s34)*var
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
c           
	B50ds=wt

      return
      end
*
************************************************************************
* B50cs+B50es has been B15234s
      function B50es(i1,i2,i3,i4,i5,wtplot)
      implicit real*8(a-h,o-z)
      common /yij5/y(5,5)
      common /s4/s12,s13,s14,s23,s24,s34
      common /plots/plot
      logical plot 
      wt=0d0
*
* 2-4-3 antenna
*
      call pmap5to4(i2,i4,i3,i1,i5,2,3,1,4)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = E30y5(i2,i4,i3)*
     #     A40tilde(s12,s13,s14,s23,s24,s34)*var 
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 1-4-3 antenna
*
      call pmap5to4(i1,i4,i3,i2,i5,1,3,2,4)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = E30y5(i1,i4,i3)*
     #	   A40tilde(s12,s13,s14,s23,s24,s34)*var 
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
c *****************************************************
c exchange 3<->4
c 2-3-4 antenna
*
      call pmap5to4(i2,i3,i4,i1,i5,2,4,1,3)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = E30y5(i2,i3,i4)*
     #     A40tilde(s12,s13,s14,s23,s24,s34)*var 
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 1-3-4 antenna
*
      call pmap5to4(i1,i3,i4,i2,i5,1,4,2,3)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = E30y5(i1,i3,i4)*
     #	   A40tilde(s12,s13,s14,s23,s24,s34)*var 
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
      B50es = wt

      return
      end
*
************************************************************************
*
      function B15234s(i1,i2,i3,i4,i5,wtplot)
      implicit real*8(a-h,o-z)
      common /yij5/y(5,5)
      common /s4/s12,s13,s14,s23,s24,s34
      common /plots/plot
      logical plot 
      wt=0d0
*
* 1-5-2 antenna
*
      call pmap5to4(i1,i5,i2,i3,i4,1,2,3,4)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = A30y5(i1,i5,i2)*
     #	   4d0*B40(s12,s13,s14,s23,s24,s34)*var
c          2*B40=Bpole,Aqgq=2*A30     
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 4-3-2 antenna
*
      call pmap5to4(i4,i3,i2,i1,i5,3,2,1,4)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
         wtsub = E30y5(i2,i4,i3)*
     #	   2d0*A40tilde(s12,s13,s14,s23,s24,s34)*var 
c        Aslc=2*A40tilde, therefore factor 2     
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 1-4-3 antenna
*
      call pmap5to4(i1,i4,i3,i2,i5,1,3,2,4)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = E30y5(i1,i4,i3)*
     #	   2d0*A40tilde(s12,s13,s14,s23,s24,s34)*var 
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif

      B15234s = wt

      return
      end
*
************************************************************************
*
      function B12354s(i1,i2,i3,i4,i5,wtplot)
      implicit real*8(a-h,o-z)
      common /yij5/y(5,5)
      common /s4/s12,s13,s14,s23,s24,s34
      common /plots/plot
      logical plot 
      wt=0d0
*
* 3-5-4 antenna
*
      call pmap5to4(i3,i5,i4,i1,i2,3,4,1,2)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = A30y5(i3,i5,i4)*
     #	   4d0*B40(s12,s13,s14,s23,s24,s34)*var
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
      B12354s = wt

      return
      end
*
c 
      function AABBs(i1,i2,i3,i4,i5,wtplot)
      implicit real*8(a-h,o-z)
      common /yij5/y(5,5)
      common /s4/s12,s13,s14,s23,s24,s34
      common /plots/plot
      logical plot 
      wt=0d0
*
* 1-5-2 antenna
*
      call pmap5to4(i1,i5,i2,i3,i4,1,2,3,4)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = 4d0*A30y5(i1,i5,i2)*
     #	   B40(s12,s13,s14,s23,s24,s34)*var
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 3-5-4 antenna
*
      call pmap5to4(i3,i5,i4,i1,i2,3,4,1,2)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = 4d0*A30y5(i3,i5,i4)*
     #	   B40(s12,s13,s14,s23,s24,s34)*var
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 1-5-4 antenna
*
      call pmap5to4(i1,i5,i4,i2,i3,1,4,2,3)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = 4d0*A30y5(i1,i5,i4)*
     #	   B40(s12,s13,s14,s23,s24,s34)*var
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 3-5-2 antenna
*
      call pmap5to4(i3,i5,i2,i1,i4,3,2,1,4)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = 4d0*A30y5(i3,i5,i2)*
     #	   B40(s12,s13,s14,s23,s24,s34)*var
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 1-5-3 antenna - minus sign
*
      call pmap5to4(i1,i5,i3,i2,i4,1,3,2,4)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = -4d0*A30y5(i1,i5,i3)*
     #	   B40(s12,s13,s14,s23,s24,s34)*var
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 4-5-2 antenna - minus sign
*
      call pmap5to4(i4,i5,i2,i1,i3,4,2,1,3)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = -4d0*A30y5(i4,i5,i2)*
     #	   B40(s12,s13,s14,s23,s24,s34)*var
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 4-3-2 antenna
*
      call pmap5to4(i4,i3,i2,i1,i5,4,2,1,3)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = E30y5(i2,i3,i4)*
     #	   2d0*A40tilde(s12,s13,s14,s23,s24,s34)*var 
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 1-4-3 antenna
*
      call pmap5to4(i1,i4,i3,i2,i5,1,3,2,4)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = E30y5(i1,i4,i3)*
     #	   2d0*A40tilde(s12,s13,s14,s23,s24,s34)*var 
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
      AABBs = wt

      return
      end
*
************************************************************************
* Bfin = -2*C40, Aqgq=2*A30 => multiply with overall factor -4

      function AAAAs(i1,i2,i3,i4,i5,wtplot)
      implicit real*8(a-h,o-z)
      common /yij5/y(5,5)
      common /s4/s12,s13,s14,s23,s24,s34
      common /plots/plot
      logical plot 
      wt=0d0
*
* 1-5-2 antenna
*
      call pmap5to4(i1,i5,i2,i3,i4,1,2,3,4)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = -4d0*A30y5(i1,i5,i2)*
     #	   C40(s12,s13,s14,s23,s24,s34)*var
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 3-5-4 antenna
*
      call pmap5to4(i3,i5,i4,i1,i2,3,4,1,2)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = -4d0*A30y5(i3,i5,i4)*
     #	   C40(s12,s13,s14,s23,s24,s34)*var
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 1-5-4 antenna
*
      call pmap5to4(i1,i5,i4,i2,i3,1,4,2,3)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = -4d0*A30y5(i1,i5,i4)*
     #	   C40(s12,s13,s14,s23,s24,s34)*var
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 3-5-2 antenna
*
      call pmap5to4(i3,i5,i2,i1,i4,3,2,1,4)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = -4d0*A30y5(i3,i5,i2)*
     #	   C40(s12,s13,s14,s23,s24,s34)*var
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 1-5-3 antenna - minus sign
*
      call pmap5to4(i1,i5,i3,i2,i4,1,3,2,4)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = 4d0*A30y5(i1,i5,i3)*
     #	   C40(s12,s13,s14,s23,s24,s34)*var
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 4-5-2 antenna - minus sign
*
      call pmap5to4(i4,i5,i2,i1,i3,4,2,1,3)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = 4d0*A30y5(i4,i5,i2)*
     #	   C40(s12,s13,s14,s23,s24,s34)*var
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
	
      AAAAs = wt

      return
      end
*
************************************************************************
* combination af AAAAs-AB....s for N^0 part

      function ACs(i1,i2,i3,i4,i5,wtplot)
      implicit real*8(a-h,o-z)
      common /yij5/y(5,5)
      common /s4/s12,s13,s14,s23,s24,s34
      common /plots/plot
      logical plot 
      wt=0d0
*
* 1-5-3 antenna 
*
      call pmap5to4(i1,i5,i3,i2,i4,1,3,2,4)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = 2d0*A30y5(i1,i5,i3)*
     #	   (C40(s12,s13,s14,s23,s24,s34)
     #     +C40(s12,s24,s23,s14,s13,s34))*var
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 4-5-2 antenna 
*
      call pmap5to4(i4,i5,i2,i1,i3,4,2,1,3)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = 2d0*A30y5(i4,i5,i2)*
     #	   (C40(s12,s13,s14,s23,s24,s34)
     #     +C40(s12,s24,s23,s14,s13,s34))*var
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
	
      ACs = wt

      return
      end
*
************************************************************************
*
      function AB12354s(i1,i2,i3,i4,i5,wtplot)
      implicit real*8(a-h,o-z)
      common /yij5/y(5,5)
      common /s4/s12,s13,s14,s23,s24,s34
      common /plots/plot
      logical plot 
      wt=0d0
*
* 3-5-4 antenna
*
      call pmap5to4(i3,i5,i4,i1,i2,3,4,1,2)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = A30y5(i3,i5,i4)*(-4d0)*
     #	   C40(s12,s13,s14,s23,s24,s34)*var
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif

      AB12354s = wt

      return
      end
*
************************************************************************
*
      function AB15234s(i1,i2,i3,i4,i5,wtplot)
      implicit real*8(a-h,o-z)
      common /yij5/y(5,5)
      common /s4/s12,s13,s14,s23,s24,s34
      common /plots/plot
      logical plot 
      wt=0d0
*
* 1-5-2 antenna
* factors: Bfin=-2*C40, Aqgq=2*A30 => factor -4
*
      call pmap5to4(i1,i5,i2,i3,i4,1,2,3,4)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = A30y5(i1,i5,i2)*(-4d0)*
     #	   C40(s12,s13,s14,s23,s24,s34)*var
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif

      AB15234s = wt

      return
      end
*
************************************************************************
*
      function AB15432s(i1,i2,i3,i4,i5,wtplot)
      implicit real*8(a-h,o-z)
      common /yij5/y(5,5)
      common /s4/s12,s13,s14,s23,s24,s34
      common /plots/plot
      logical plot 
      wt=0d0
*
* 1-5-4 antenna
*
      call pmap5to4(i1,i5,i4,i2,i3,1,4,2,3)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = A30y5(i1,i5,i4)*(-4d0)*
     #	   C40(s12,s13,s14,s23,s24,s34)*var
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif

      AB15432s = wt

      return
      end
*
************************************************************************
*
      function AB14352s(i1,i2,i3,i4,i5,wtplot)
      implicit real*8(a-h,o-z)
      common /yij5/y(5,5)
      common /s4/s12,s13,s14,s23,s24,s34
      common /plots/plot
      logical plot 
      wt=0d0
*
* 3-5-2 antenna
*
      call pmap5to4(i3,i5,i2,i1,i4,3,2,1,4)
      call ecuts(4,var,ipass)
        if(ipass.eq.1)then
           wtsub = A30y5(i3,i5,i2)*(-4d0)*
     #	   C40(s12,s13,s14,s23,s24,s34)*var
           if(plot)then
             call bino(1,wtplot*wtsub,5)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif

      AB14352s = wt

      return
      end
*
c ----------------------------------------------------------------------
c four parton one-loop functions
c see oldvirt.f for definitions
c ----------------------------------------------------------------------
*
      function fLA34(p1,p2,p3,p4)
      implicit real*8(a-o,q-z)
      implicit integer(p)

      fLA34=LA34(p1,p2,p3,p4)/8d0
      return
      end
*
************************************************************************
*
      function fLB34(p1,p2,p3,p4)
      implicit real*8(a-o,q-z)
      implicit integer(p)

      fLB34=LB34(p1,p2,p3,p4)/8d0
      return
      end
*
************************************************************************
*
      function fLA(p1,p2,p3,p4)
      implicit real*8(a-o,q-z)
      implicit integer(p)

      fLA=LA(p1,p2,p3,p4)/8d0
      return
      end
*
************************************************************************
*
      function fLB(p1,p2,p3,p4)
      implicit real*8(a-o,q-z)
      implicit integer(p)

      fLB=LB(p1,p2,p3,p4)/8d0
      return
      end
*
************************************************************************
*
      function fLC(p1,p2,p3,p4)
      implicit real*8(a-o,q-z)
      implicit integer(p)

      fLC=LC(p1,p2,p3,p4)/8d0
      return
      end
*
************************************************************************
*
      function fLNF(p1,p2,p3,p4)
      implicit real*8(a-o,q-z)
      implicit integer(p)

      fLNF=LNF(p1,p2,p3,p4)/8d0
      return
      end
*
************************************************************************
*
      function fua12(p1,p2,p3,p4)
      implicit real*8(a-o,q-z)
      implicit integer(p)

      fua12=ua12(p1,p2,p3,p4)/8d0
      return
      end
*
************************************************************************
*
      function fub12(p1,p2,p3,p4)
      implicit real*8(a-o,q-z)
      implicit integer(p)

      fub12=ub12(p1,p2,p3,p4)/8d0
      return
      end
*
************************************************************************
*
      function fuc12(p1,p2,p3,p4)
      implicit real*8(a-o,q-z)
      implicit integer(p)

      fuc12=uc12(p1,p2,p3,p4)/8d0
      return
      end
*
************************************************************************
*
      function fua14(p1,p2,p3,p4)
      implicit real*8(a-o,q-z)
      implicit integer(p)

      fua14=-ua14(p1,p2,p3,p4)/8d0
      return
      end
*
************************************************************************
*
      function fub14(p1,p2,p3,p4)
      implicit real*8(a-o,q-z)
      implicit integer(p)

      fub14=-ub14(p1,p2,p3,p4)/8d0
      return
      end
*
************************************************************************
*
      function fuc14(p1,p2,p3,p4)
      implicit real*8(a-o,q-z)
      implicit integer(p)

      fuc14=-uc14(p1,p2,p3,p4)/8d0
      return
      end
*
***************************************************************************
c auxiliary functions for three parton one-loop:
      function FCA(s12,s13,s23)
      implicit real*8(a-h,o-z)
      parameter(pi=3.141592653589793238d0)

      s123=s12+s13+s23
      y12=s12/s123
      y13=s13/s123
      y23=s23/s123
      
      omy12=1d0-y12
      omy13=1d0-y13
      omy23=1d0-y23

      r1213=log(y12)*log(y13)-log(y12)*log(omy12)-log(y13)*log(omy13)
     .    +pi**2/6d0-rli2(y12)-rli2(y13)
      r1223=log(y12)*log(y23)-log(y12)*log(omy12)-log(y23)*log(omy23)
     .    +pi**2/6d0-rli2(y12)-rli2(y23)
      r1323=log(y23)*log(y13)-log(y23)*log(omy23)-log(y13)*log(omy13)
     .    +pi**2/6d0-rli2(y23)-rli2(y13)
      FCA =
     .  +log(y13)*(y13/(y12+y23))
     .  +log(y23)*(y23/(y12+y13))
     .  +((y12**2+(y12+y13)**2)/y13/y23*r1223
     .                  +(y12**2+(y12+y23)**2)/y13/y23*r1213
     .                  +(y13**2+y23**2)/y13/y23/(y13+y23)
     .    -2d0*log(y12)*(y12**2/(y13+y23)**2+2d0*y12/(y13+y23)) )
     .     -T(y12,y13,y23)*r1323
*
*  correction such that finite piece remains after I1 extracted
*
      FCA = FCA 
     . - (10d0/6d0*log(y13*y23)-3d0/2d0*log(y12)-4d0)*T(y12,y13,y23)
      return
      end
*
************************************************************************
c
      function FCF(s12,s13,s23)
      implicit real*8(a-h,o-z)
      parameter(pi=3.141592653589793238d0)

      s123=s12+s13+s23
      y12=s12/s123
      y13=s13/s123
      y23=s23/s123

      omy12=1d0-y12
      omy13=1d0-y13
      omy23=1d0-y23

      r1213=log(y12)*log(y13)-log(y12)*log(omy12)-log(y13)*log(omy13)
     .    +pi**2/6d0-rli2(y12)-rli2(y13)
      r1223=log(y12)*log(y23)-log(y12)*log(omy12)-log(y23)*log(omy23)
     .    +pi**2/6d0-rli2(y12)-rli2(y23)
      FCF =
     .  +(y12/(y12+y13)+y12/(y12+y23)+(y12+y23)/y13+(y12+y13)/y23)
     .  +log(y13)*((4d0*y12**2+2d0*y12*y13
     .           +4d0*y12*y23+y13*y23)/(y12+y23)**2)
     .  +log(y23)*((4d0*y12**2+2d0*y12*y23
     .           +4d0*y12*y13+y13*y23)/(y12+y13)**2)
     . -2d0*((y12**2+(y12+y13)**2)/y13/y23*r1223
     .                  +(y12**2+(y12+y23)**2)/y13/y23*r1213
     .                  +(y13**2+y23**2)/y13/y23/(y13+y23)
     .    -2d0*log(y12)*(y12**2/(y13+y23)**2+2d0*y12/(y13+y23)) )
     
*
*  correction such that finite piece remains after I1 extracted
*
      FCF=FCF-8d0*T(y12,y13,y23)-3d0*log(y12)*T(y12,y13,y23)
      return
      end
*
************************************************************************
* needed only for comparison to original version
      function Axqq(ia,iu,ib)
      implicit real*8(a-h,o-z)
      common /yij5/y(5,5)
      yau=y(ia,iu)
      yub=y(iu,ib)
      yab=y(ia,ib)
      yaub=yau+yub+yab
      Axqq=2d0/yaub*yau**2/yub/yaub  
      return
      end
*
************************************************************************
*
      function Aqqx(ia,iu,ib)
      implicit real*8(a-h,o-z)
      Aqqx=Axqq(ib,iu,ia)  
      return
      end
*
